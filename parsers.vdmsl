module Parsers
imports
    from Util functions unionAll; maxSet; foldSet
exports all
definitions

types
    Terminal = <Plus> | <x> | <EOI>;
    Nonterminal = <START> | <E> | <T>;
    Symbol = Terminal | Nonterminal;

    Rule :: lhs: Nonterminal
            rhs: seq of Symbol;

    Item :: rule: Rule
            progress: nat
        inv item == item.progress <= len item.rule.rhs;

    State = set of Item;

    ShiftAction :: State;
    ReduceAction :: Rule;
    GotoAction :: State;
    Conflict :: set of Action;
        -- TODO: this crashes VDMJ
        --inv mk_Conflict(conflict) == forall c in set conflict & not is_Conflict(c);
    Action = ShiftAction | ReduceAction | GotoAction | <AcceptParse> | Conflict;

    NumShiftAction :: nat;
    NumGotoAction :: nat;
    NumConflict :: set of NumAction;
        -- TODO: this crashes VDMJ
        --inv mk_Conflict(conflict) == forall c in set conflict & not is_Conflict(c);
    NumAction = NumShiftAction | ReduceAction | NumGotoAction | <AcceptParse> | NumConflict;

    LRTable = map State * Symbol to Action;
    NumLRTable = map nat * Symbol to NumAction
values
    foldStates = Util`foldSet[State, LRTable];
    foldItems = Util`foldSet[Item, LRTable];
    foldTerms = Util`foldSet[Terminal, LRTable];
functions
    -- Returns the symbol following the dot if the item is incomplete.
    -- Otherwise, returns a sentinel value
    nextSym: Item -> [Symbol]
    nextSym(item) ==
        if item.progress < len item.rule.rhs then
            item.rule.rhs(item.progress+1)
        else nil;

    -- Move the dot forward one
    advanceItem: Item -> Item
    advanceItem(item) == mk_Item(item.rule, item.progress+1)
    pre item.progress < len item.rule.rhs;

    isComplete: Item -> bool
    isComplete(item) == nextSym(item) = nil
    post not RESULT => is_Symbol(nextSym(item));

    -- Add a new action to the LRTable
    addAction: LRTable -> (State * Symbol) -> Action -> LRTable
    addAction(table)(key)(action) == table ++ {key |->
        if key in set dom table and table(key) <> action then
            cases mk_(table(key), action):
                mk_(mk_Conflict(conflicts), b) -> mk_Conflict({b} union conflicts),
                mk_(a, b)                      -> mk_Conflict({a, b})
            end
        else action
    };

    findStartState: set of State -> State
    findStartState(states) == let
        startState in set states be st
            exists i in set startState & i.rule.lhs = <START> and i.progress = 0
    in startState
    pre card states > 0;

    numberStates: LRTable -> map State to nat
    numberStates(table) == let
        states = {s | mk_(s, -) in set dom table},
        startState = findStartState(states),

        numberStates': nat -> set of State -> map State to nat -> map State to nat
        numberStates'(n)(states')(m) ==
            if states' = {} then m
            else let
                s in set states' be st true
            in numberStates'(n+1)(states' \ {s})(m munion {s |-> n})
    in numberStates'(1)(states \ {startState})({startState |-> 0})
    pre card dom table > 0;

    numberedTable: LRTable -> NumLRTable
    numberedTable(table) == let
        stateNums = numberStates(table),

        actionToNumAction: Action -> NumAction
        actionToNumAction(a) == cases a:
            mk_ShiftAction(s)      -> mk_NumShiftAction(stateNums(s)),
            mk_GotoAction(s)       -> mk_NumGotoAction(stateNums(s)),
            mk_Conflict(conflicts) -> mk_NumConflict({actionToNumAction(c) | c in set conflicts}),
            others                 -> a
        end
    in {mk_(stateNums(s), sym) |-> actionToNumAction(table(mk_(s, sym))) | mk_(s, sym) in set dom table}
    pre card dom table > 0;

    -----------
    -- LR(0) --
    -----------

    closure: set of Rule -> State -> State
    closure(rules)(s0) == let
        unionAll = Util`unionAll[Item],

        find: State -> State
        find(s) == let
            s' = s union unionAll({
                {mk_Item(r, 0) | r in set rules & r.lhs = nextSym(i)}
            | i in set s})
        in
            if s = s' then s
            else find(s')
    in find(s0);

    goto: set of Rule -> State -> Symbol -> State
    goto(rules)(s)(sym) == closure(rules)({advanceItem(i) | i in set s & nextSym(i) = sym});

    -- Generates an LR(0) parsing table for the given grammar
    -- and start symbol
    generateLR0Table: set of Rule -> Nonterminal -> LRTable
    generateLR0Table(rules)(startSym) == let
        unionAll = Util`unionAll[State],
        closure' = closure(rules),
        goto' = goto(rules),
        startRule = mk_Rule(<START>, [startSym, <EOI>]),
        initStates = {closure'({mk_Item(startRule, 0)})},

        generate: set of State -> LRTable -> LRTable
        generate(states)(table) == let
            states' = states union unionAll({
                {goto'(s)(nextSym(i)) | i in set s & not isComplete(i)}
            | s in set states}),

            -- Add actions
            table' = foldStates(lambda s: State, t: LRTable &
                foldItems(lambda i: Item, t1: LRTable &
                    if isComplete(i) then
                        foldTerms(lambda term: Terminal, t2: LRTable &
                            addAction(t2)(mk_(s, term))(mk_ReduceAction(i.rule))
                        )(t1)({term | term : Terminal})
                    else let
                        nextState = goto'(s)(nextSym(i)),
                        action =
                            if nextSym(i) = <EOI> then <AcceptParse>
                            elseif is_Terminal(nextSym(i)) then mk_ShiftAction(nextState)
                            else mk_GotoAction(nextState)
                    in addAction(t1)(mk_(s, nextSym(i)))(action)
                )(t)(s)
            )(table)(states')
        in
            if states' = states and table' = table then table'
            else generate(states')(table')
    in generate(initStates)({|->});

    ------------
    -- SLR(1) --
    ------------

    -- Finds the set of all nonterminals that can reduce to the empty string
    findNullables: set of Rule -> set of Nonterminal
    findNullables(rules) == let
        find: set of Nonterminal -> set of Nonterminal
        find(nullables) == let
            nullables' = {r.lhs | r in set rules &
                forall s in seq r.rhs & s in set nullables
            }
        in
            if nullables = nullables' then nullables
            else find(nullables')
    in find({});

    -- Maps a sequence of symbols to its longest nullable prefix
    -- (a nullable prefix is a prefix in which all symbols are nullable)
    nullPrefix: set of Nonterminal -> seq of Symbol -> seq of Nonterminal
    nullPrefix(nullables)(s) == let
        lastInds = {i | i in set inds s &
            forall x in seq s(1,...,i) & x in set nullables
        }
    in
        if lastInds = {} then []
        else s(1,...,Util`maxSet(lastInds));

    -- Finds all suffixes of s that follow some instance of n
    followSuffixes: Nonterminal -> seq of Symbol -> set of seq of Symbol
    followSuffixes(n)(s) == {s(i+1,...,len s) | i in set inds s & i < len s and s(i) = n}
    post forall fs in set RESULT & len fs > 0;

    -- Maps each nonterminal to the set of its possible start terminals
    findStarts: set of Rule -> set of Nonterminal -> map Symbol to set of Terminal
    findStarts(rules)(nullables) == let
        unionAll = Util`unionAll[Terminal],
        -- The only possible start terminal for a terminal is itself
        -- (terminals are never the lhs of any grammar rule)
        termStarts = { s |-> {s} | s : Terminal },

        find: map Symbol to set of Terminal -> map Symbol to set of Terminal
        find(starts) == let
            -- For each nonterminal n, gather any terminal that could possibly be the first
            -- token of a string matching n. There are two possible ways a terminal t could start
            -- such a string:
            --    1. t is in the start set of some symbol in the nullable prefix of one of n's rules.
            --    2. t is in the start set of the symbol s that directly follows the nullable prefix of
            --       one of n's rules (if there is such a symbol)
            --           - If the nullable prefix is the empty sequence, then s would be the first
            --             symbol of the rule's rhs.
            starts' = termStarts ++ {n |->
                unionAll({let
                    prefix = nullPrefix(nullables)(r.rhs)
                in
                    unionAll({starts(i) | i in seq prefix}) union
                    (if len r.rhs > len prefix then starts(r.rhs(len prefix+1))
                     else {})
                | r in set rules & r.lhs = n})
            | n : Nonterminal}
        in
            if starts' = starts then starts
            else find(starts')
    in find(termStarts ++ {n |-> {} | n : Nonterminal});

    -- Maps each nonterminal to the set of terminals that can directly follow a string matching
    -- one of the nonterminal's rules
    findFollows: set of Rule -> set of Nonterminal -> map Symbol to set of Terminal -> map Nonterminal to set of Terminal
    findFollows(rules)(nullables)(starts) == let
        unionAll = Util`unionAll[Terminal]

        -- For each nonterminal n, search each rule's rhs for occurrences of n and gather any
        -- terminals that could possibly follow n. There are two possible ways a terminal t
        -- could follow n:
        --   1. t is in the start set of some symbol in n's nullable suffix.
        --          - We use the nullable prefix of the follow suffix of n instead of the
        --            nullable suffix, but these are equivalent.
        --   2. t is in the start set of the symbol s that directly follows n's nullable suffix
        --      (if there is such a symbol).
        --          - If n's nullable suffix is the empty sequence, then s is the symbol that
        --            directly follows n.
    in {n |-> unionAll({
            unionAll({let
                nullSuffix = nullPrefix(nullables)(fs)
            in
                unionAll({starts(i) | i in seq nullSuffix}) union
                (if len fs > len nullSuffix then starts(fs(len nullSuffix+1))
                 else {})
            | fs in set followSuffixes(n)(r.rhs)})
        | r in set rules})
    | n : Nonterminal};

    -- Generates an SLR(1) parsing table for the given grammar
    -- and start symbol
    generateSLR1Table: set of Rule -> map Nonterminal to set of Terminal -> Nonterminal -> LRTable
    generateSLR1Table(rules)(follows)(startSym) == let
        unionAll = Util`unionAll[State],
        closure' = closure(rules),
        goto' = goto(rules),
        startRule = mk_Rule(<START>, [startSym, <EOI>]),
        follows' = follows ++ {startSym |-> follows(startSym) union {<EOI>}},
        initStates = {closure'({mk_Item(startRule, 0)})},

        generate: set of State -> LRTable -> LRTable
        generate(states)(table) == let
            states' = states union unionAll({
                {goto'(s)(nextSym(i)) | i in set s & not isComplete(i)}
            | s in set states}),

            -- Add actions
            table' = foldStates(lambda s: State, t: LRTable &
                foldItems(lambda i: Item, t1: LRTable &
                    if isComplete(i) then
                        foldTerms(lambda term: Terminal, t2: LRTable &
                            addAction(t2)(mk_(s, term))(mk_ReduceAction(i.rule))
                        )(t1)(follows'(i.rule.lhs))
                    else let
                        nextState = goto'(s)(nextSym(i)),
                        action =
                            if nextSym(i) = <EOI> then <AcceptParse>
                            elseif is_Terminal(nextSym(i)) then mk_ShiftAction(nextState)
                            else mk_GotoAction(nextState)
                    in addAction(t1)(mk_(s, nextSym(i)))(action)
                )(t)(s)
            )(table)(states')
        in
            if states' = states and table' = table then table'
            else generate(states')(table')
    in generate(initStates)({|->});

end Parsers
